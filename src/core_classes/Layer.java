/**
 * 
 */
package core_classes;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import application_frames.SettingsFrame;
import toolset.Tools;

/**
 * Defines the structure of a layer in the system.<br>
 * A layer will be defined as a polygon, point of a polyline containing different features.<br>
 * Thus, all features in the layer will be of the same type.<br>
 * <p>
 * A layer is unique with its geometry type and its ID, this ID is not stored in the database
 * but it is generated during the session. The Table of Contents class manages this ID and assigns
 * ID to different layers, based on the time of creation.<br>
 * <p>
 * A layer is represented on the table of contents based on its associated table data, i.e the visibilty of the
 * layer, the layer geometry type, the layer name and its associated ID.<br>
 * <p>
 * The drawing panel displays a layer and its associated features based on the visibility status.<br>
 * If a layer visibility status is set to false, all features within the layer will not be shown
 * even if the features visibility status is true.<br>
 * 
 * @author Olumide Igbiloba
 * @since Dec 7, 2017
 * @version
 * a. Dec 9, 2017 - Added the tabledata variable to the layer 
 * b. Dec 12, 2017 - Change the layer ID of all the features of a layer when the layer ID is changed 
 *
 */
public class Layer  {
	
	/** ID of the layer, this is generated during the session, and must be obtained from the table of contents */
	private int id = 0;
	/** The layers name, usually autogenerated by default by the table of contents */
	private String layerName = "";
	/** Data that represents a layer at the table of contents */
	private Object[] tableData = {};
	/** List of features contained in a layer */
	private List<Feature> listOfFeatures = new ArrayList<Feature>();
	/** The geometry type of a layer i.e point, polygon or polyline */
	private String layerType = "";
	/** The default color of a layer */
	private Color layerColor = SettingsFrame.DEFAULT_LAYER_COLOR;
	/** The default line weight of a layer */
	private int lineWeight = SettingsFrame.DEFAULT_LAYER_LINE_WEIGHT;
	/** The Visibility of a layer, when layer is not visible, all features in the layer will be not painted, nor 
	 * selectable */
	private boolean isVisible = true;
	/** Saved status of a layer, when new features are drawn on the layer, the saved status becomes false and 
	 * the user will be prompted to save when the layer is switched to another layer for editing */
	private boolean notSaved = false;
	private boolean inDatabase = false;
	
	
	/**
	 * Creates an Object of the class Layer
	 * @param id The ID of a Layer
	 * @param isVisible The status of Visibility of a Layer
	 * @param layerType The type of a Layer
	 * @param layerName The name of a Layer
	 */
	public Layer(int id, boolean isVisible, String layerType,  String layerName) {
		//super(id);
		this.id = id;
		this.layerName = layerName;
		this.isVisible = isVisible;
		this.layerType = layerType;
		this.tableData = new Object[] {isVisible, layerType, layerName, "", id};
		
		setLayerColor(Tools.getRandomColor());
	}
	
	/**
	 * Returns the ID of the Layer
	 * @return the id
	 */
	public int getId() {
		return id;
	}

	/**
	 * Sets the ID of the Layer
	 * @param id the ID to set
	 */
	public void setId(int id) {
		this.id = id;
		
		// !!!! Change the layer ID of all the features in the layer list
		for(Feature feature : listOfFeatures) {
			feature.setLayerID(id);
		}
	}

	/**
	 * Returns the table data of a Layer
	 * @return the tableData
	 */
	public Object[] getTableData() {
		
		this.tableData = new Object[] {isVisible, layerType, layerName, "", id};
		return this.tableData;
	}

	/**
	 * Returns the name of Layer
	 * @return the layerName
	 */
	public String getLayerName() {
		return layerName;
	}

	/**
	 * Sets the name of a Layer
	 * @param layerName the layerName to set
	 */
	public void setLayerName(String layerName) {
		this.layerName = layerName;
	}

	/**
	 * Returns the status of the visibility of a Layer
	 * @return the isVisible
	 */
	public boolean isVisible() {
		return isVisible;
	}

	/**
	 * Sets the status of the visibility of a Layer
	 * @param isVisible set isVisible parameter
	 */
	public void setVisible(boolean isVisible) {
		this.isVisible = isVisible;
	}

	/**
	 * Returns the Color of a Layer
	 * @return the layerColor
	 */
	public Color getLayerColor() {
		return layerColor;
	}

	/**
	 * Sets the Color of a Layer
	 * @param layerColor the layerColor to set
	 */
	public void setLayerColor(Color layerColor) {
		this.layerColor = layerColor;
	}

	/**
	 * Returns the type of a Layer
	 * @return the layerType
	 */
	public String getLayerType() {
		return layerType;
	}

	/**
	 * Sets the type of a Layer
	 * @param layerType the layerType to set
	 */
	public void setLayerType(String layerType) {
		this.layerType = layerType;
	}

	/**
	 * Returns the saving status of a Layer
	 * @return the notSaved
	 */
	public boolean isNotSaved() {
		return notSaved;
	}

	/**
	 * Sets the saving status of a Layer
	 * @param notSaved the notSaved to set
	 */
	public void setNotSaved(boolean notSaved) {
		this.notSaved = notSaved;
	}

	/**
	 * Returns whether a Layer is saved in the Database
	 * @return the inDatabase
	 */
	public boolean isInDatabase() {
		return inDatabase;
	}

	/**
	 * Saves a Layer into the Database
	 * @param inDatabase the inDatabase to set
	 */
	public void setInDatabase(boolean inDatabase) {
		this.inDatabase = inDatabase;
	}

	/**
	 * Returns the Feature list of a Layer
	 * @return the listOfFeatures
	 */
	public List<Feature> getListOfFeatures() {
		return listOfFeatures;
	}

	/**
	 * Sets the Feature list of a Layer
	 * @param listOfFeatures the listOfFeatures to set
	 */
	public void setListOfFeatures(List<Feature> listOfFeatures) {
		this.listOfFeatures = listOfFeatures;
	}

	/**
	 * Returns the next Feature ID of a Layer
	 * @return the next Feature ID
	 */
	public int getNextFeatureID() {
		return this.listOfFeatures.size() + 1;
	}

	/**
	 * Returns the line weight of a Layer
	 * @return the lineWeight
	 */
	public int getLineWeight() {
		return lineWeight;
	}

	/**
	 * Sets the line weight of a Layer
	 * @param lineWeight the lineWeight to set
	 */
	public void setLineWeight(int lineWeight) {
		this.lineWeight = lineWeight;
	}
	
	/**
	 * Sets the highlighting status of the Features of a Layer
	 * @param cond the cond to set
	 */
	public void highlightAllFeatures(boolean cond) {
		for(Feature feature : listOfFeatures) {
			feature.setHighlighted(cond);
		}
	}
	
	/**
	 * Returns a Feature by ID
	 * @param id the Feature ID to set
	 * @return the Feature
	 */
	public Feature getFeatureWithID(int id) {
		for(Feature feature : listOfFeatures) {
			if(feature.getId() == id ) {
				return feature;
			}
		}	
		return null;	
	}
	
	/**
	 * Returns the Size of a Feature list
	 * @return listOfFeatures the Feature list size
	 */
	public int getSize() {
		return listOfFeatures.size();
	}

	/**
	 * Removes the last item of a Feature list
	 */
	public void removeLastItem() {
		listOfFeatures.remove(getSize()-1);
	}

	/**
	 * Sets the table Data of a Layer
	 * @param tableData the tableData to set
	 */
	public void setTableData(Object[] tableData) {
		this.tableData = tableData;
	}
}
